# Packages는 도트(.)를 사용해 
# 파이썬 모듈을 계층적(디렉터리 구조)로 관리할 수 있게 해준다.
# 예를 들어, 모듈 이름이 A.B인 경우에는 A는 패키지 이름 B는 A 패키지의 모듈(.py)이다.

# 파이썬 패키지는 디렉터리와 파이썬 모듈로 이루어지며 구조는 아래와 같다.
# EX
# game/
#     __init__.py
#     sound/
#         __init__.py
#         echo.py
#         wav.py
#     graphic/
#         __init__.py
#         screen.py
#         render.py
#     play/
#         __init__.py
#         run.py
#         test.py

# game, sound, graphic, play는 디렉터리이고
# 확장자가 .py인 파일은 파이썬 모듈이다.
# game 디렉터리가 이 패키지의 루트 디렉터리이고
# sound, graphic, play는 서브 디렉터리이다.

# __init_.py 파일은 조금 특이한 용도로 사용한다.

# 간단한 파이썬 프로그램이 아니라면, 이렇게 패키지 구조로 파이썬 프로그램을 만드는 것이
# 공동 작업이나 유지 보수 등 여러 면에서 유리하다.
# 또한 패키지 구조로 모듈을 만들면 다른 모듈과 이름이 겹쳐도 안전하게 사용할 수 있다.



[ __init_.py의 용도 ]
__init__.py 파일은 해당 디렉터리가 패키지의 일부임을 알려주는 역할을 한다.
만약 game, sound, graphic 등 패키지에 포함된 디렉터리에 __init__.py 파일이 없다면 패키지로 인식되지 않는다.

python 3.3 버전부터는 __init__.py 파일이 없어도 패키지로 인식한다.
하지만 하위 버전 호환을 위해 __init__.py 파일을 생성하는 것이 안전한 방법이다.

파이썬 인터프리터에서
from game.sound import *
echo.echo_test()
이렇가 하면 echo 라는 이름이 정의되지 않았다는 이름 오류(NameError)가 발생했다.

이렇게 특정 디렉터리의 모듈을 * 를 사용해서 import할 때는
해당 디렉터리의 __init__.py 파일에 __all__ 변수를 설정하고 import 할 수 있는 모듈을 정의해 주어야 한다.

# C:/doit/game/sound/__init__.py
__all__ = ['echo']

여기에서 __all__이 의미하는 것은 sound 디렉터리에서 * 기호를 사용해 import할 경우 이곳에 정의된 echo 모듈먄 import 된다는 의미이다.

from game.sound.echo import *는 __all__과는 상관없이 무조건 import된다.
이렇게 __all__과 상관없이 무조건 import되는 경우는 from a.b.c import *에서 from의 마지막 항복인 c가 모듈인 경우이다.

[ Relative 패키지 ]
만약 graphic 디렉터리의 render.py 모듈이 sound 디렉터리의 echo.py 모듈을 사용하고 싶다면 어떻게 해야 할까?
아래와 같이 render.py를 수정하면 가능하다.
from game.sound.echo import echo_test
def render_test():
    print("render")
    echo_test()

위의 경우처럼 from game.sound.echo import echo_test를 입력해 전체 경로를 사용해 import할 수도 있지만,
아래와 같이 relative하게 import하는 것도 가능하다.
from ..sound.echo import echo_test
def render_test():
    print("render")
    echo_test()

from game.sound.echo import echo_test가
from ..sound.echo import echo_test로 변경되었다.
여기에서 .. 은 render.py 파일의 부모 디렉터리를 의미한다.
따라서 render.py 파일의 부모 디렉터리는 game이므로 위와 같은 import가 가능한 것이다.

relative한 접근자에는 다음과 같은 것이 있다.
.. : 부모 디렉터리
. : 현재 디렉터리